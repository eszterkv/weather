---
import Layout from '../layouts/Layout.astro'
import { format } from 'date-fns'
import { getWeatherArt } from '../utils/get-weather-art'

export const prerender = false

const getUserLocation = async () => {
  try {
    const response = await fetch('http://ip-api.com/json/')
    const data = await response.json()
    return data.place || 'Budapest'
  } catch (error) {
    return 'Budapest'
  }
}

const userLocation = await getUserLocation()

const place = Astro.url.searchParams.get('place') || userLocation || 'budapest'

const getWeatherData = async (place) => {
  try {
    const response = await fetch(
      `https://api.openweathermap.org/data/2.5/forecast?q=${encodeURIComponent(place)}&appid=${import.meta.env.OPENWEATHER_API_KEY}&units=metric`
    )

    if (!response.ok) {
      throw new Error('Weather data not found')
    }

    return await response.json()
  } catch (error) {
    throw new Error('Failed to fetch weather data:', error.message)
  }
}

const groupForecastsByDay = (forecasts) => {
  return forecasts
    .filter(forecast => {
      const hour = new Date(forecast.dt_txt).getHours()
      return hour >= 6 && hour <= 21
    })
    .reduce((acc, forecast) => {
      const date = forecast.dt_txt.split(' ')[0]
      if (!acc[date]) {
        acc[date] = []
      }
      acc[date].push(forecast)
      return acc
    }, {})
}

const generatePeriodForecasts = (forecasts) => {
  return forecasts
    .map((forecast, index) => {
      const time = format(new Date(forecast.dt_txt), 'HH:mm')
      const temp = Math.round(forecast.main.temp)
      const weather = forecast.weather[0].main
      const windSpeed = Math.round(forecast.wind.speed * 3.6)
      const weatherArt = getWeatherArt(weather.toLowerCase())
      const isFirstForecast = index === 0

      return `
        <figure class="${isFirstForecast ? 'current-weather' : ''}">
          <pre class="weather-art">${weatherArt}</pre>
          <figcaption>
            <div class="time">${time}</div>
            <div class="temp">${temp}Â°C</div>
            <div class="weather">${weather}</div>
            <div class="wind">${windSpeed} km/h</div>
          </figcaption>
        </figure>
      `
    })
    .join('')
}

const weatherData = await getWeatherData(place)
const groupedForecasts = groupForecastsByDay(weatherData.list)
---

<Layout title="Weather Report">
  <main>
    <div class="search-container">
      <form>
        <input
          type="text"
          name="place"
          id="placeInput"
          placeholder="enter place name"
          aria-label="enter place name"
        />
      </form>
    </div>
    <div class="weather-display">
      <h1>weather report: <strong>{weatherData.city.name.toLowerCase()}</strong></h1>
      {Object.entries(groupedForecasts).map(([date, forecasts]) => (
        <div class="day-forecast">
          <div class="date">{format(new Date(date), 'EEE dd MMM')}</div>
          <div class="periods">
            <Fragment set:html={generatePeriodForecasts(forecasts)} />
          </div>
        </div>
      ))}
    </div>
  </main>
</Layout>

<style is:global>
  main {
    font: 17px sans-serif;
    padding: 1rem;
    min-height: 100vh;
	max-width: 800px;
	margin: 0 auto;
  }

  h1 {
	font: 500 1.25rem sans-serif;
	margin-bottom: 1rem;
  }

  .search-container {
    margin-bottom: 1.5rem;
  }

  input {
    border: 1px solid black;
    padding: 0.5rem;
    font-size: 1rem;
    width: 100%;
    max-width: 300px;
  }

  input:focus {
    outline: none;
    border-color: #999;
  }

  .day-forecast {
    margin-bottom: 2rem;
  }

  .date {
    font-weight: bold;
    margin-bottom: 1rem;
  }

  .periods {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 1rem;
  }

  figure {
	font-family: monospace;
    display: flex;
	gap: 1rem;
    border: 1px solid black;
    padding: .75rem;
  }

  .weather-art {
    white-space: pre;
  }
</style>

<script>
  const form = document.querySelector('form')
  
  form?.addEventListener('submit', async (e) => {
    e.preventDefault()
    const formData = new FormData(e.target)
    const place = formData.get('place')
    
    if (place) {
      window.location.href = `?place=${encodeURIComponent(place.toLowerCase())}`
    }
  })
</script> 